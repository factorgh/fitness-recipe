// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'utils/objectbox/meal.dart';
import 'utils/objectbox/mealplan.dart';
import 'utils/objectbox/rating.dart';
import 'utils/objectbox/recipe.dart';
import 'utils/objectbox/recurrence.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2175359485680231743),
      name: 'Meal',
      lastPropertyId: const obx_int.IdUid(6, 879769658714762826),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5910466400108813957),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5015819003394617829),
            name: 'mealType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6136821147410283040),
            name: 'timeOfDay',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2766373028299257023),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 6825130177161715710),
            name: 'recipes',
            targetId: const obx_int.IdUid(5, 2509254879441766488))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8077234356764088651),
      name: 'MealPlan',
      lastPropertyId: const obx_int.IdUid(10, 1801675965372450488),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6268506666960717134),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6079723702078867674),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4179844275235680252),
            name: 'duration',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3238672387304464907),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4246706944425300193),
            name: 'endDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 86607004051988919),
            name: 'createdBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1239049735729618572),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4562951406141252736),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6175976162777256257),
            name: 'trainees',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 6543049314054127070),
            name: 'meals',
            targetId: const obx_int.IdUid(1, 2175359485680231743))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5757382098347596282),
      name: 'Recurrence',
      lastPropertyId: const obx_int.IdUid(5, 4160343561825470995),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5486506904754650367),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7224900800099520225),
            name: 'option',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8686171339527459486),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4160343561825470995),
            name: 'customDays',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 485010878886571879),
      name: 'Rating',
      lastPropertyId: const obx_int.IdUid(3, 8250720109532932638),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6083377310139884228),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8823770081435338336),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8250720109532932638),
            name: 'rating',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2509254879441766488),
      name: 'Recipe',
      lastPropertyId: const obx_int.IdUid(12, 8548829516044282930),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8672326941178240123),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6584223607976213594),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6062210455352601087),
            name: 'ingredients',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7007087160096045757),
            name: 'instructions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5825856961685139549),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1594081895414642150),
            name: 'facts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5051465370454150638),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6054871669508240422),
            name: 'period',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4497706410247335861),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7038271639163192564),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1794356249922819614),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8548829516044282930),
            name: 'createdBy',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 7288223937769270401),
            name: 'ratings',
            targetId: const obx_int.IdUid(4, 485010878886571879))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2509254879441766488),
      lastIndexId: const obx_int.IdUid(2, 6790546698322738498),
      lastRelationId: const obx_int.IdUid(4, 6543049314054127070),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [2665813072965125738, 6790546698322738498],
      retiredPropertyUids: const [
        8192073926462960344,
        1801675965372450488,
        4152194929284537578,
        879769658714762826
      ],
      retiredRelationUids: const [9059798311934063456],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Meal: obx_int.EntityDefinition<Meal>(
        model: _entities[0],
        toOneRelations: (Meal object) => [],
        toManyRelations: (Meal object) =>
            {obx_int.RelInfo<Meal>.toMany(3, object.id): object.recipes},
        getId: (Meal object) => object.id,
        setId: (Meal object, int id) {
          object.id = id;
        },
        objectToFB: (Meal object, fb.Builder fbb) {
          final mealTypeOffset = fbb.writeString(object.mealType);
          final timeOfDayOffset = fbb.writeString(object.timeOfDay);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mealTypeOffset);
          fbb.addOffset(2, timeOfDayOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final mealTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final timeOfDayParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = Meal(
              id: idParam,
              mealType: mealTypeParam,
              timeOfDay: timeOfDayParam,
              date: dateParam);
          obx_int.InternalToManyAccess.setRelInfo<Meal>(object.recipes, store,
              obx_int.RelInfo<Meal>.toMany(3, object.id));
          return object;
        }),
    MealPlan: obx_int.EntityDefinition<MealPlan>(
        model: _entities[1],
        toOneRelations: (MealPlan object) => [],
        toManyRelations: (MealPlan object) =>
            {obx_int.RelInfo<MealPlan>.toMany(4, object.id): object.meals},
        getId: (MealPlan object) => object.id,
        setId: (MealPlan object, int id) {
          object.id = id;
        },
        objectToFB: (MealPlan object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final durationOffset = fbb.writeString(object.duration);
          final createdByOffset = fbb.writeString(object.createdBy);
          final traineesOffset = fbb.writeList(
              object.trainees.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, durationOffset);
          fbb.addInt64(3, object.startDate?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endDate?.millisecondsSinceEpoch);
          fbb.addOffset(5, createdByOffset);
          fbb.addInt64(6, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addOffset(8, traineesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final endDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final durationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final startDateParam = startDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(startDateValue);
          final endDateParam = endDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endDateValue);
          final traineesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final createdByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final object = MealPlan(
              id: idParam,
              name: nameParam,
              duration: durationParam,
              startDate: startDateParam,
              endDate: endDateParam,
              trainees: traineesParam,
              createdBy: createdByParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<MealPlan>(object.meals, store,
              obx_int.RelInfo<MealPlan>.toMany(4, object.id));
          return object;
        }),
    Recurrence: obx_int.EntityDefinition<Recurrence>(
        model: _entities[2],
        toOneRelations: (Recurrence object) => [],
        toManyRelations: (Recurrence object) => {},
        getId: (Recurrence object) => object.id,
        setId: (Recurrence object, int id) {
          object.id = id;
        },
        objectToFB: (Recurrence object, fb.Builder fbb) {
          final optionOffset = fbb.writeString(object.option);
          final customDaysOffset = object.customDays == null
              ? null
              : fbb.writeListInt64(object.customDays!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, optionOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, customDaysOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final optionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final customDaysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final object = Recurrence(
              id: idParam,
              option: optionParam,
              date: dateParam,
              customDays: customDaysParam);

          return object;
        }),
    Rating: obx_int.EntityDefinition<Rating>(
        model: _entities[3],
        toOneRelations: (Rating object) => [],
        toManyRelations: (Rating object) => {},
        getId: (Rating object) => object.id,
        setId: (Rating object, int id) {
          object.id = id;
        },
        objectToFB: (Rating object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addFloat64(2, object.rating);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final ratingParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              Rating(id: idParam, userId: userIdParam, rating: ratingParam);

          return object;
        }),
    Recipe: obx_int.EntityDefinition<Recipe>(
        model: _entities[4],
        toOneRelations: (Recipe object) => [],
        toManyRelations: (Recipe object) =>
            {obx_int.RelInfo<Recipe>.toMany(2, object.id): object.ratings},
        getId: (Recipe object) => object.id,
        setId: (Recipe object, int id) {
          object.id = id;
        },
        objectToFB: (Recipe object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final ingredientsOffset = fbb.writeList(
              object.ingredients.map(fbb.writeString).toList(growable: false));
          final instructionsOffset = fbb.writeString(object.instructions);
          final descriptionOffset = fbb.writeString(object.description);
          final factsOffset = fbb.writeString(object.facts);
          final statusOffset = fbb.writeString(object.status);
          final periodOffset = fbb.writeString(object.period);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final createdByOffset = fbb.writeString(object.createdBy);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, ingredientsOffset);
          fbb.addOffset(3, instructionsOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, factsOffset);
          fbb.addOffset(6, statusOffset);
          fbb.addOffset(7, periodOffset);
          fbb.addOffset(8, imageUrlOffset);
          fbb.addInt64(9, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(11, createdByOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final ingredientsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 8, []);
          final instructionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final factsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final periodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final createdByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final object = Recipe(
              id: idParam,
              title: titleParam,
              ingredients: ingredientsParam,
              instructions: instructionsParam,
              description: descriptionParam,
              facts: factsParam,
              status: statusParam,
              period: periodParam,
              imageUrl: imageUrlParam,
              createdBy: createdByParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<Recipe>(object.ratings, store,
              obx_int.RelInfo<Recipe>.toMany(2, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Meal] entity fields to define ObjectBox queries.
class Meal_ {
  /// See [Meal.id].
  static final id = obx.QueryIntegerProperty<Meal>(_entities[0].properties[0]);

  /// See [Meal.mealType].
  static final mealType =
      obx.QueryStringProperty<Meal>(_entities[0].properties[1]);

  /// See [Meal.timeOfDay].
  static final timeOfDay =
      obx.QueryStringProperty<Meal>(_entities[0].properties[2]);

  /// See [Meal.date].
  static final date = obx.QueryDateProperty<Meal>(_entities[0].properties[3]);

  /// see [Meal.recipes]
  static final recipes =
      obx.QueryRelationToMany<Meal, Recipe>(_entities[0].relations[0]);
}

/// [MealPlan] entity fields to define ObjectBox queries.
class MealPlan_ {
  /// See [MealPlan.id].
  static final id =
      obx.QueryIntegerProperty<MealPlan>(_entities[1].properties[0]);

  /// See [MealPlan.name].
  static final name =
      obx.QueryStringProperty<MealPlan>(_entities[1].properties[1]);

  /// See [MealPlan.duration].
  static final duration =
      obx.QueryStringProperty<MealPlan>(_entities[1].properties[2]);

  /// See [MealPlan.startDate].
  static final startDate =
      obx.QueryDateProperty<MealPlan>(_entities[1].properties[3]);

  /// See [MealPlan.endDate].
  static final endDate =
      obx.QueryDateProperty<MealPlan>(_entities[1].properties[4]);

  /// See [MealPlan.createdBy].
  static final createdBy =
      obx.QueryStringProperty<MealPlan>(_entities[1].properties[5]);

  /// See [MealPlan.createdAt].
  static final createdAt =
      obx.QueryDateProperty<MealPlan>(_entities[1].properties[6]);

  /// See [MealPlan.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<MealPlan>(_entities[1].properties[7]);

  /// See [MealPlan.trainees].
  static final trainees =
      obx.QueryStringVectorProperty<MealPlan>(_entities[1].properties[8]);

  /// see [MealPlan.meals]
  static final meals =
      obx.QueryRelationToMany<MealPlan, Meal>(_entities[1].relations[0]);
}

/// [Recurrence] entity fields to define ObjectBox queries.
class Recurrence_ {
  /// See [Recurrence.id].
  static final id =
      obx.QueryIntegerProperty<Recurrence>(_entities[2].properties[0]);

  /// See [Recurrence.option].
  static final option =
      obx.QueryStringProperty<Recurrence>(_entities[2].properties[1]);

  /// See [Recurrence.date].
  static final date =
      obx.QueryDateProperty<Recurrence>(_entities[2].properties[2]);

  /// See [Recurrence.customDays].
  static final customDays =
      obx.QueryIntegerVectorProperty<Recurrence>(_entities[2].properties[3]);
}

/// [Rating] entity fields to define ObjectBox queries.
class Rating_ {
  /// See [Rating.id].
  static final id =
      obx.QueryIntegerProperty<Rating>(_entities[3].properties[0]);

  /// See [Rating.userId].
  static final userId =
      obx.QueryStringProperty<Rating>(_entities[3].properties[1]);

  /// See [Rating.rating].
  static final rating =
      obx.QueryDoubleProperty<Rating>(_entities[3].properties[2]);
}

/// [Recipe] entity fields to define ObjectBox queries.
class Recipe_ {
  /// See [Recipe.id].
  static final id =
      obx.QueryIntegerProperty<Recipe>(_entities[4].properties[0]);

  /// See [Recipe.title].
  static final title =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[1]);

  /// See [Recipe.ingredients].
  static final ingredients =
      obx.QueryStringVectorProperty<Recipe>(_entities[4].properties[2]);

  /// See [Recipe.instructions].
  static final instructions =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[3]);

  /// See [Recipe.description].
  static final description =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[4]);

  /// See [Recipe.facts].
  static final facts =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[5]);

  /// See [Recipe.status].
  static final status =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[6]);

  /// See [Recipe.period].
  static final period =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[7]);

  /// See [Recipe.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[8]);

  /// See [Recipe.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Recipe>(_entities[4].properties[9]);

  /// See [Recipe.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Recipe>(_entities[4].properties[10]);

  /// See [Recipe.createdBy].
  static final createdBy =
      obx.QueryStringProperty<Recipe>(_entities[4].properties[11]);

  /// see [Recipe.ratings]
  static final ratings =
      obx.QueryRelationToMany<Recipe, Rating>(_entities[4].relations[0]);
}
